#!/usr/bin/perl
$ID = q$Id: ticket 4331 2008-06-02 22:01:59Z tskirvin$;

=head1 NAME

remedy-worklog - creates a short worklog entry for an incident

=head1 SYNOPSIS

  remedy-worklog [-hv] C<INCIDENT_NUMBER> TEXT

=head1 DESCRIPTION

remedy-worklog creates a new WorkLog entry for the given incident.  The text is
provided on the command line.  This creates a small entry that contains the 
following fields:

    3           Submit Date     Current time of submission
    1000000000  Description     "submitted through remctl"
    1000000151  Detailed Desc   C<TEXT>
    1000000161  Ticket Number   C<INCIDENT_NUMBER>
    1000000169  Submitter       $ENV{'REMOTE_USER'} (remctl)
                                $ENV{'USER'} (command-line)
    1000000170  Worklog Type    8000: "General Information"

This is not meant to replace sending emails for longer worklog entries, but should 
handle small cases fairly well.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<-v>, B<--version>

Prints out the version information and exits.

=back

=head1 EXAMPLES

=over 4

=item remedy-worklog INC000000804714 "problem not recurring, closing"

=item remedy-worklog 804714 "problem not recurring, closing"

Creates a worklog entry for for INC000000804714 that just includes the listed
text.

=back

=cut

##############################################################################
### Configuration
##############################################################################

## Log level; higher is more.  '9' is considered fully verbose.
$Stanford::Remedy::LOGLEVEL = 1;

## Tag to include include in the common log file
$LOG_TAG = "CREATE_WL";

## Where should we get local username/password information?
$CONFIG = "/etc/remedy/local.conf";

##############################################################################
### Declarations
##############################################################################

=head1 REQUIREMENTS

C<Stanford::Remedy>, C<ARS> (from B<http://www.arsperl.org/>), and the Remedy
API (installed in /opt/appadmin/remedy).

=cut

use ARS;
use Getopt::Long qw(GetOptions);
use Pod::Usage;
use Text::Wrap;

use Stanford::Remedy;

use strict;
use vars qw( $LOGLEVEL $LOG_TAG $ID $DEFAULT_TYPE $AR @STATUS $REMEDY_LOG
             %AR_SCHEMA $FORMAT_TKT $FORMAT_WORKLOG %IMPACT %URGENT
             @PRIORITY %STATUS_REASON $FORMAT_DEBUG $CONFIG $REMEDY_USER 
             $REMEDY_PASS $REMEDY_SYSTEM $REMEDY_PORT );
use warnings;

##############################################################################
### main()
##############################################################################

shift @ARGV if $ENV{'REMOTE_USER'};    # support for remctl use
$|++;       # Flush output

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
        'h|help'     => \&_usage,
        'v|version'  => \&_version,
                                 ) || exit 1;

do $CONFIG or die "Couldn't load configuration '$CONFIG': $!\n";

_loglevel(5, "Remedy system is '$REMEDY_SYSTEM'");

my ($incnum, $text) = &_parse_params (@ARGV);
$AR = Stanford::Remedy::remedy_connect( $REMEDY_USER, $REMEDY_PASS,
                                        $REMEDY_SYSTEM, $REMEDY_PORT ) ||
    _log_and_die("Connection Error occurred:\n\t$ars_errstr");
_loglevel(8, "Session is $AR");

my $return = worklog_create($AR, $incnum, $text);

Stanford::Remedy::remedy_logoff($AR);
print "$return\n" if $return;
$return ? exit 1 : exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

sub worklog_create {
    my ($ar, $ticket, $text) = @_;
    my $schema = $Stanford::Remedy::AR_SCHEMA{'HDWorkLog'};

    my %tktdata;
    $tktdata{'3'}          = time;
    $tktdata{'1000000000'} = "submitted through remctl";
    $tktdata{'1000000151'} = $text;
    $tktdata{'1000000159'} = $ENV{'REMOTE_USER'} || $ENV{'USER'} || "unknown";
    $tktdata{'1000000161'} = $ticket;
    $tktdata{'1000000170'} = 8000;      # General information
    
    unless (ars_CreateEntry($ar, $schema, %tktdata)) {
        return "Couldn't create worklog entry for $ticket: $ars_errstr";
    } else { return 0 }
}

##############################################################################
### Internal Subroutines #####################################################
##############################################################################

### _log_and_die ( TEXT )
# Logs TEXT with mainlib.pl's log() function, and dies with the text.

sub _log_and_die {
    my (@args) = @_;
    my $text = join("\n", @args, '');
    Stanford::Remedy::remedy_log($LOG_TAG, $text);
    Stanford::Remedy::remedy_logoff($AR) if $AR;
    die $text;
}

### _loglevel ( LEVEL, TEXT )
# Logs TEXT with mainlib.pl's log() function if the level passed is
# less-or-equal to the current $LOGLEVEL.

sub _loglevel {
    my ($level, @args) = @_;
    Stanford::Remedy::remedy_log_iflevel($level, $LOG_TAG, @args);
}

sub _parse_params {
    my ($incnum, @text) = @_;
    pod2usage( -verbose => 1 ) unless ($incnum);

    # Standardize the ticket name
    unless (($incnum =~ /^INC/) && (length($incnum) == 15)) {
        if ($incnum =~ /^HD\d+/) {
            $incnum =~ s/^HD0//;
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        } elsif ($incnum =~ /^INC\d+/) {
            $incnum =~ s/^INC//;
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        } elsif ($incnum =~ /^\d+$/) {
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        }
    }

    _loglevel(5, "req set to $incnum");
    pod2usage( -verbose => 1 ) unless $incnum =~ /^INC\d+$/;

    ($incnum, join(" ", @text));
}


### _usage ()
# Prints out short status information and exits.

sub _usage { pod2usage(-verbose => 2) }

### _version ()
# Prints out the version number and exits

sub _version {
    my $version = join (' ', (split (' ', $ID))[1..3]);
    $version =~ s/,v\b//;
    $version =~ s/(\S+)$/($1)/;
    die "$version\n";
}

##############################################################################
### Final Documentation
##############################################################################

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

For Stanford internal use only.

=cut
