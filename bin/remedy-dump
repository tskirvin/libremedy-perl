#!/usr/bin/perl -T
# Copyright and license are in the documentation below.

##############################################################################
### Configuration
##############################################################################

## Modify and uncomment this to use user code instead of just system-wide
## modules, or to use development versions.
# use lib '/FULL/PATH/TO/PERL/MODULES';
use lib "/afs/ir/users/t/s/tskirvin/work/remedy/Stanford-Remedy/lib"; 
use lib "/afs/ir/users/t/s/tskirvin/work/libremedy-perl/lib";

## Shared configuration file.  Set with '--config'
our $CONFIG = "/etc/remedy/config";

## Print debugging information?  Set with '--debug'
our $DEBUG = 0;

## Defaults for 'userinfo' and 'groupinfo'
our $DEFAULT_USER  = $ENV{'REMOTE_USER'} || $ENV{'USER'} || "unknown";
our $DEFAULT_GROUP = '';

## Higher is more verbose ('9' is the highest).  Set to 9 with '--debug'
our $LOGLEVEL = 1;

## Tag to include include in the common log file
our $LOG_TAG = "REMEDY-DUMP";

##############################################################################
### Declarations
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Remedy;
use Text::Wrap;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

##############################################################################
### main ()
##############################################################################

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'c|config=s'    => \$CONFIG,
    'd|debug'       => sub { $DEBUG = 1; $LOGLEVEL = 9 },
    'man'           => sub { pod2usage (-verbose=>2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose=>1) }) || error_usage ();
map { untaint ($_) } $CONFIG;

debug ("Loading config file $CONFIG") if $CONFIG;
my $config = eval { Remedy::Config->load ($CONFIG) };
error ($@) unless $config;
error ($config) if $@;

$config->debug ($DEBUG ? 9 : $LOGLEVEL);

my ($table, @rest) = @ARGV;
error_usage ('need a table name') unless $table;

debug ("Connecting to database");
my $remedy = eval { Remedy->connect ($config) }
    or error ("couldn't connect to database: $@");
error ($@) if $@;

debug ("Printing all entries in table '$table'");
my @entries = eval { $remedy->read ($table, 'all' => 1) };
if ($@) { 
    print "No information for '$table'; possible values:\n";
    foreach (sort $remedy->registered_classes) { print " * $_\n" }
    exit 1;
} elsif (scalar @entries) { 
    foreach my $entry (@entries) { 
        my $print = scalar $entry->print_text;
        print $print;
        if ($DEBUG);
            my $debug = scalar $entry->debug_text;
            if ($debug != $print) { print "\nRaw Data:\n$debug" }
        }
    }
} else {
    print "No entries in table '$table'\n";
}
    
exit 0;

##############################################################################
### Subroutines 
##############################################################################

sub debug { warn "$0: @_\n" if $DEBUG }
sub error { my $text = "@_"; chomp $text; die "$0: $text\n" }
sub error_usage { 
    my ($error) = @_;
    pod2usage (-exit_status => 2, -verbose => 1, -message => $error) 
}

### untaint (TEXT, MATCH)
# Untaint user-offered data that is "safe enough", or die if it's not.
sub untaint {
    my ($text, $match) = @_;
    $match ||= '[a-zA-Z0-9_./: -]*';
    return '' unless defined $text;
    if ($text =~ m%^($match)$%) { return $1 } 
    else                        { error ("tainted data: '$text' ($match)") }
}   

##############################################################################
### Documentation
##############################################################################

=head1 NAME

remedy-dump - print all information from a Remedy table

=head1 SYNOPSIS

B<remedy-dump> I<TABLE>

B<remedy> --help

=head1 DESCRIPTION

remedy-dump pulls and prints all entries from the given I<TABLE> in the Remedy
database. 

=head1 OPTIONS

=over 4

=item B<-c> I<CONFIG>, B<--config> I<CONFIG>

Loads the specified configuration file with B<Remedy::Config> instead of the
default.

=item B<-d>, B<--debug>

Print debugging information, both within the 

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 FILES

=over 4

=item I</etc/remedy/config>

Remedy configuration file, parsed by B<Remedy::Config>.  

=back

=head1 REQUIREMENTS

B<Remedy>

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

For Stanford internal use only.

=cut
