#!/usr/bin/perl
# Copyright and license are in the documentation below.

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user code instead of just system-wide
## modules, or to use development versions.
# use lib '/FULL/PATH/TO/PERL/MODULES';
use lib "/afs/ir/users/t/s/tskirvin/work/remedy/libremedy-perl/lib";

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

## Defaults for 'userinfo' and 'groupinfo'
our $DEFAULT_USER  = $ENV{'REMOTE_USER'} || $ENV{'USER'} || "unknown";
our $DEFAULT_GROUP = '';

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Remedy;
use Remedy::Form::Error;
use Remedy::Form::People;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

##############################################################################
### main () ##################################################################
##############################################################################

my $logger = Remedy::Log->get_logger;

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || error_usage ();

my $remedy = eval { Remedy->connect ('debug' => $DEBUG) }
    or $logger->logdie ("couldn't connect to database: $@");
$logger->logdie ($@) if $@;

my ($query, @rest) = @ARGV;
$query ||= '(none)';

if (lc $query eq 'table') {
    my ($table) = @rest;
    error_usage ('need a table name') unless $table;

    $logger->info ("Getting all information about table '$table'");
    foreach my $obj ($remedy->form ($table)) {
        if (defined $obj) {
            print scalar $obj->debug_table;
            exit 0;
        } else {
            print "No information for '$table'; known values:\n";
            foreach (sort $remedy->registered_classes) { print " * $_\n" }
            exit 1;
        }
    }

} elsif (lc $query eq 'userinfo') {
    my ($user) = @rest;
    $user ||= $DEFAULT_USER;
    error_usage ('need a user name') unless $user;

    my %search = ('SUNET ID' => $user);
    $logger->info ("Printing user information for '$user'");
    my @return = $remedy->read ('Remedy::Form::People', %search);
    if (! scalar @return) {
        $logger->logdie ("no matching entries")
    }
    foreach my $obj (@return) {
        my $print = scalar $obj->print;
        print $print;
        if ($DEBUG) {
            my $debug = scalar $obj->debug_table;
            if ($debug ne $print) { print "\nRaw Data:\n$debug" }
        }
    }

} elsif (lc $query eq 'groupinfo') {
    my ($group) = @rest;
    $group ||= $DEFAULT_GROUP;
    error_usage ('need a group name') unless $group;

    my %search = ('Support Group Name' => $group);
    $logger->info ("Printing group information for '$group'");
    my @return = $remedy->read ('supportgroup', %search);
    if (! scalar @return) {
        $logger->logdie ("no matching entries")
    }
    foreach my $obj (@return) {
        my $print = scalar $obj->print;
        print $print;
        if ($DEBUG) {
            my $debug = scalar $obj->debug_table;
            if ($debug ne $print) { print "\nRaw Data:\n$debug" }
        }
    }

} elsif (lc $query eq 'error') {

    my @errors;
    foreach my $code (@rest) {
        $logger->info ("finding info for error code '$code'");
        my %search = ('Message Number' => $code);
        my @entries = $remedy->read ('Remedy::Form::Error', %search);
        if (! scalar @entries) {
            print "No information for code '$code'\n";
            next;
        }
        $logger->info (sprintf ("%d %s", scalar @entries, 
            scalar @entries eq 1 ? "entries" : "entries"));
        push @errors, @entries;
    }

    ## Actually printing the useful information
    if (! scalar @errors) { 
        $logger->error ("no matching errors");
        exit 1;
    } else { 
        my $count = 0;
        foreach my $entry (@errors) { 
            my $print = scalar $entry->print;
            print $print;
            if ($DEBUG) {
                my $debug = scalar $entry->debug_pretty;
                if ($debug ne $print) { print "\nRaw Data:\n$debug" }
            }
        }
    }


} elsif (lc $query eq 'help') {
    pod2usage (-verbose => 2, -exit_status => 0, -noperldoc => 1);

} else { error_usage ("invalid query type: '$query'") }

exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### error_usage (ERROR)
# Uses Pod::Usage to print an error message and the usage information
sub error_usage {
    my ($error) = @_;
    my $logger = Remedy::Log->get_logger ();
    $logger->error ($error);
    pod2usage (-exit_status => 2, -verbose => 1);
}

##############################################################################
### Documentation ############################################################
##############################################################################

=head1 NAME

remedy - prints information about the Remedy database

=head1 SYNOPSIS

B<remedy> table I<TABLE>

B<remedy> userinfo I<USERNAME>

B<remedy> groupinfo I<GROUPNAME>

B<remedy> error I<ERROR_CODE> [I<ERROR_CODE> I<ERROR_CODE> I<...>]

B<remedy> --help

=head1 DESCRIPTION

B<remedy> pulls and prints information about the Remedy database, or about the
users and support groups managed within.

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Print debugging information, both within this module and within the Remedy
module.  Can be offered multiple times to increase debugging accordingly.

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head2 MODES

=over 4

=item table I<TABLE>

Pulls and prints information about the table described in the perl module
I<TABLE>.  Loads the module first, so that we can load arbitrary installed
modules.

=item userinfo I<USERNAME>

Prints information about the user I<USERNAME>, including the full name, the
user's department and phone number, and a count and listing of its associated
support groups.

=item groupinfo I<GROUPNAME>

Prints information about the support group I<GROUPNAME>, including the group
name, its associated email addresses, and a count and listing of its members.

=item error I<ERROR_CODE> [I<ERROR_CODE> I<ERROR_CODE> I<...>]

Prints information about the error code I<ERROR_CODE> (many can be offered).
Uses B<Remedy::Form::Error>.

=item help

Prints a basic help message and exits.

=back

=head2 FLAGS

=over 4

=item B<-c> I<CONFIG>, B<--config> I<CONFIG>

Loads the specified configuration file with B<Remedy::Config> instead of the
default.

=item <-d>, B<--debug>

Print debugging information, both within this module and within the Remedy
module.  Can be offered multiple times to increase debugging accordingly.

=item B<--group> I<GROUP>

Sets the group that we'll use with the I<groupinfo> query.  No default.

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints out the full help documentation and exits.

=item B<--user> I<USER>

Sets the user to run the I<userinfo> query about.  Defaults to
$ENV{'REMOTE_USER'} (if set by remctl) or $ENV{'USER'} (if set by

=back

=head1 EXAMPLES

=over 4

=item remedy table Remedy::Person

Prints out all information about the table I<Remedy::Person>

=item remedy userinfo tskirvin

Prints out information about username I<tskirvin>.

=item remedy groupinfo 'ITS Unix Systems'

Prints out information about group I<ITS Unix Systems>.

=back

=cut

=head1 FILES

=over 4

=item I</etc/remedy/config>

Remedy configuration file, parsed by B<Remedy::Config>.

=back

=head1 REQUIREMENTS

B<Remedy>, B<Remedy::Form::People>, B<Remedy::Form::Error>

=head1 SEE ALSO

B<Remedy::Config>, B<Remedy::Form>, B<Remedy::Form::SupportGroup>

=head1 HOMEPAGE

TBD.

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2008-2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
