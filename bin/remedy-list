#!/usr/bin/perl
$ID = q$Id: ticket 4331 2008-06-02 22:01:59Z tskirvin$;

=head1 NAME

remedy-list - lists summary information about a set of tickets

=head1 SYNOPSIS

  remedy-list [-hv] [-u USER] [-t TYPE] [-s SUBTYPE] [-a USER] [TIME]

=head1 DESCRIPTION

remedy-list queries the Remedy database for information on a set of tickets,
based on either the submitter, the assigned user, the assigned group, or some
sub-set thereof.  It is not meant to offer an exhaustive list of operations to
search the Remedy database, but it offers some of the most common searches.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<-v>, B<--version>

Prints out the version information and exits.

=item B<-t>, B<--type> TYPE

Defines the kind of search.  Valid options:

=over 4

=item unresolved

Unresolved tickets from a certain timestamp

=item unassigned

Unassigned tickets in a specific group

=item group 

Tickets assigned to the given group

=item assign 

Tickets assigned to the given user

=item submit 

Tickets submitted by the given user

=item userinfo 

Information about a specific user

=item groupinfo 

Information about a specific group

=back

Defaults to 'unresolved'.

=item B<-a>, B<--all> USER

For group-based queries - unresolved, unassigned, group, groupinfo - runs the
query against all groups that user C<USER> belogs to. 

=item B<-u>, B<--user>, B<-g>, B<--group> USER/GROUP

Defines the user or group that we're searching by.  Defaults to 'ITS Unix
Systems'.  (The B<-g> and B<--group> are for compatibility with other
functions.)

=item B<-s>, B<--subtype> SUBTYPE

Defines the sub-type for the searches under 'group', 'assign', or 'submit' -
that is, do we search for open tickets, closed tickets, etc?  Valid options:

  open      Open tickets
  closed    Closed tickets
  all       All tickets 

Defaults to 'open'.

=item TIME

Used only for 'unresolved', this is a string that is parsed by Date::Manip into
a useful timestamp for searching.  As an example, "last Friday 5pm" is a valid
string.  Defaults to the current time.

=back

=head1 EXAMPLES

=over 4

=item remedy-list

=item remedy-list -t unresolved -u "ITS Unix Systems" last friday 5pm

Lists unresolved tickets assigned to the ITS Unix Systems group that were
created before last Friday at 5pm.  This more-or-less corresponds to the
reports that are sent out to management on a weekly basis.

  Unresolved tickets for 'ITS Unix Systems', submitted before 2008-06-13 17:00:00

  657351     heatherf   hallk      ITS Unix Systems                      Assigned
    Created: 2007-11-19 09:46:29    Updated: 2008-06-11 11:45:51
    Summary: Pinnacle Work Order

  809611     eric2      jws        ITS Unix Systems                       Pending
    Created: 2008-03-03 15:40:18    Updated: 2008-05-09 13:53:04
    Summary: Operating System

  [...]

=item remedy-list -t unassigned -u "ITS Unix Systems"

Lists all tickets in the group ITS Unix Systems that are not assigned to a
given person.

=item remedy-list -t assign -u tskirvin

Lists all open tickets assigned to user 'tskirvin'.

  Open tickets assigned to user 'tskirvin'

  864587     jeremyb7   tskirvin   ITS Usenet                            Assigned
    Created: 2008-06-08 22:14:23    Updated: 2008-06-16 10:57:29
    Summary: Security issue or concern

=item remedy-list -t group -u "ITS Unix Systems" -s closed

Lists closed tickets assigned to the group "ITS Unix Systems".

  Closed tickets assigned to group 'ITS Unix Systems'

  848932     riepel     darrenp1   ITS Unix Systems                        Closed
    Created: 2008-05-07 14:24:53    Updated: 2008-05-25 06:33:26
    Summary: Server

  848991     sunia      darrenp1   ITS Unix Systems                        Closed
    Created: 2008-05-07 15:26:54    Updated: 2008-05-25 06:33:26
    Summary: Data Backup and Recovery

=back

=cut

##############################################################################
### Configuration
##############################################################################

## Log level; higher is more.  '9' is considered fully verbose.
$Stanford::Remedy::LOGLEVEL = 1;

## Tag to include include in the common log file
$LOG_TAG = "TKT_LIST";

## What's the default request type?
$DEFAULT_TYPE = "base";

## Where should we get local username/password information?
$CONFIG = "/etc/remedy/local.conf";

## Defaults for command-line options
%DEFAULT = (
    'type'    => "unresolved",
    'subtype' => "open",
    'time'    => time,
    'user'    => "ITS Unix Systems",
    'all'     => 0,
           );

##############################################################################
### Declarations
##############################################################################

=head1 REQUIREMENTS

C<Stanford::Remedy>, C<ARS> (from B<http://www.arsperl.org/>), and the Remedy
API (installed in /opt/appadmin/remedy).

=cut

use ARS;
use Getopt::Long qw(GetOptions);
use Pod::Usage;
use Date::Manip;

use Stanford::Remedy;

use strict;
use vars qw( $LOGLEVEL $LOG_TAG $ID $DEFAULT_TYPE $AR $REMEDY_USER $REMEDY_PASS 
             $CONFIG $REMEDY_SYSTEM $REMEDY_PORT @BASE_SEARCH %DEFAULT @GROUPS 
             $DEFAULT_GROUP );
use warnings;

##############################################################################
### main()
##############################################################################

$|++;       # Flush output
shift @ARGV if $ENV{'REMOTE_USER'};    # support for remctl use

my $type    = $DEFAULT{'type'}    || "unset";
my $subtype = $DEFAULT{'subtype'} || "unset";
my $time    = $DEFAULT{'time'}    || time;
my $user    = $DEFAULT{'user'}    || "";
my $all     = $DEFAULT{'all'}     || 0;

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
        'h|help'           => \&_usage,
        'v|version'        => \&_version,
        't|type=s'         => \$type,
        'a|all=s'          => \$all,
        'g|group|u|user=s' => \$user,
        's|subtype=s'      => \$subtype,
                                 ) || exit 1;

do $CONFIG or die "Couldn't load configuration '$CONFIG': $!\n";
_loglevel(5, "Remedy system is '$REMEDY_SYSTEM'");

$AR = Stanford::Remedy::remedy_connect( $REMEDY_USER, $REMEDY_PASS,
                                        $REMEDY_SYSTEM, $REMEDY_PORT ) ||
    _log_and_die("Connection Error occurred:\n\t$ars_errstr");
_loglevel(8, "Session is $AR");

## If we got '--all', then we want to parse all groups that a given user
## belongs to; otherwise, we just want to use that user as the grouo name

if ($all) { @GROUPS = Stanford::Remedy::user_groups($AR, $all) }
else      { @GROUPS = $user }

# Unresolved tickets belonging to a specific group created before a given time
if      (lc $type eq 'unresolved') {
    my $date = join(" ", @ARGV) || "now";
    my $time = UnixDate($date, "%s") || time;
    foreach (@GROUPS) {
        print scalar Stanford::Remedy::text_tktlist_unresolved($AR, $_, $time);
    }
} 

# Tickets that haven't been assigned to a specific person yet.
elsif   (lc $type eq 'unassigned') {
    foreach (@GROUPS) { 
        print scalar Stanford::Remedy::text_tktlist_unassigned($AR, $_);
    }
} 

# Tickets assigned to a specific group
elsif (lc $type eq "group") { 
    foreach (@GROUPS) { 
        print scalar Stanford::Remedy::text_tktlist_group($AR, $_, $subtype);
    }
}

# Tickets assigned to a specific user
elsif (lc $type eq "assign") { 
    print scalar Stanford::Remedy::text_tktlist_assignee($AR, $user, $subtype); 
}

# Tickets submitted by a specific user
elsif (lc $type eq "submit") { 
    print scalar Stanford::Remedy::text_tktlist_submit($AR, $user, $subtype); 
}

# Information about a specific group
elsif (lc $type eq "groupinfo") { 
    foreach (@GROUPS) { 
        print scalar Stanford::Remedy::text_groupinfo($AR, $_); 
    }
} 

# Information about a specific user
elsif (lc $type eq "userinfo") { 
    print scalar Stanford::Remedy::text_userinfo($AR, $user); 
}

# Debug-level information about a specific group
elsif (lc $type eq "suppgrpinfo-raw") {
    foreach (@GROUPS) { 
        print scalar Stanford::Remedy::show_supportgroupinfo_full($AR, $_); 
    }
}

# Debug-level information about a specific user
elsif (lc $type eq "sga-raw") {
    print scalar Stanford::Remedy::show_sga_full($AR, $user); 
}

# Defaults to giving some usage information
else { pod2usage( -verbose => 1 ) }

Stanford::Remedy::remedy_logoff($AR);
exit 0;

##############################################################################
### Internal Subroutines 
##############################################################################

### _log_and_die ( TEXT )
# Logs TEXT with mainlib.pl's log() function, and dies with the text.

sub _log_and_die {
    my (@args) = @_;
    my $text = join("\n", @args, '');
    Stanford::Remedy::remedy_log($LOG_TAG, $text);
    Stanford::Remedy::remedy_logoff($AR) if $AR;
    die $text;
}

### _loglevel ( LEVEL, TEXT )
# Logs TEXT with mainlib.pl's log() function if the level passed is
# less-or-equal to the current $LOGLEVEL.

sub _loglevel {
    my ($level, @args) = @_;
    Stanford::Remedy::remedy_log_iflevel($level, $LOG_TAG, @args);
}

### _usage ()
# Prints out short status information and exits.

sub _usage { pod2usage(-verbose => 2) }

### _version ()
# Prints out the version number and exits

sub _version {
    my $version = join (' ', (split (' ', $ID))[1..3]);
    $version =~ s/,v\b//;
    $version =~ s/(\S+)$/($1)/;
    die "$version\n";
}

##############################################################################
### Final Documentation
##############################################################################

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

For Stanford internal use only.

=cut
