#!/usr/bin/perl
# Copyright and license are in the documentation below.

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user code instead of just system-wide
## modules, or to use development versions.
# use lib '/FULL/PATH/TO/PERL/MODULES';
use lib "/afs/ir/users/t/s/tskirvin/work/remedy/libremedy-perl/lib";

## Where are these system error messages stored?
our $TABLE = 'AR System Error Messages';

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Remedy;
use Text::Wrap;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

##############################################################################
### main () ##################################################################
##############################################################################

my $logger = Remedy::Log->get_logger;

my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose=>2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose=>1) }) || error_usage ();

my $remedy = eval { Remedy->connect ('debug' => $DEBUG) }
    or $logger->logdie ("couldn't connect to database: $@");
$logger->logdie ($@) if $@;

error_usage ('need an error code') unless scalar @ARGV;

my @errors;

## Pulling the entries from table
foreach my $code (@ARGV) {
    $logger->info ("finding info for error code '$code'");
    my @entries = eval { $remedy->read ($TABLE, 'Message Number' => $code) };
    if ($@) { 
        print "No information for code '$code'\n";
        next;
    }
    $logger->info (sprintf ("%d %s", scalar @entries, 
        scalar @entries eq 1 ? "entries" : "entries"));
    push @errors, @entries;
}

## Actually printing the useful information
if (! scalar @errors) { 
    $logger->error ("no matching errors");
    exit 1;
} else { 
    my $count = 0;
    foreach my $entry (@errors) { 
        my $print = scalar $entry->print;
        printf ("%sEntry %d\n%s", ($count ? "\n" : ""), ++$count, $print);
        if ($DEBUG) {
            my $debug = scalar $entry->debug_pretty;
            if ($debug ne $print) { print "\nRaw Data:\n$debug" }
        }
    }
}
    
exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

sub error_usage { 
    my ($error) = @_;
    my $logger = Remedy::Log->get_logger ();
    $logger->error ($error);
    pod2usage (-exit_status => 2, -verbose => 1);
}

##############################################################################
### Documentation ############################################################
##############################################################################

=head1 NAME

remedy-error - print all information from a Remedy table

=head1 SYNOPSIS

B<remedy-error> I<ERRORCODE> [I<ERRORCODE> I<ERRORCODE> ...]

B<remedy-error> --help

=head1 DESCRIPTION

remedy-error prints basic information about a given remedy error code (or
codes), pulled from the I<AR System Error Messages> table in the Remedy
database.

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Print debugging information, both within this module and within the Remedy
module.  Can be offered multiple times to increase debugging accordingly.

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints out the full help documentation and exits.

=back

=head1 REQUIREMENTS

B<Remedy>

=head1 HOMEPAGE

TBD.

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
