#!/usr/bin/perl

=head1 NAME

remedy-assign - assigns a ticket to a given user or group

=head1 SYNOPSIS

  remedy-assign [-hv] [-u USER] [-g GROUP] C<INCIDENT_NUMBER>

=head1 DESCRIPTION

remedy-assign assigns a ticket to the given C<USER> or C<GROUP>.  

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<-v>, B<--version>

Prints out the version information and exits.

=item B<-u USER>

Assigns the ticket to a specific user.  Assumes that either the group is
already set, or that the group is being set with B<-g>.  This user must 
exist in the correct group.

Defaults to the $ENV{'REMOTEUSER'} or $ENV{'USER'}; if you want to clear it,
use B<-u ''>.

=item B<-g GROUP>

Assigns the ticket to a specific group.

=back

=head1 EXAMPLES

=over 4

=item remedy-assign -u tskirvin -g "ITS Unix Systems" INC000000804714 

Assigns the ticket INC000000804714 to the group "ITS Unix Systems" and the user
'tskirvin'.

=item remedy-assign -g "ITS Usenet" -u '' 804714 

Assigns the ticket INC000000804714 to the group "ITS Usenet", with no
person.

=back

=cut

##############################################################################
### Configuration
##############################################################################

## Log level; higher is more.  '9' is considered fully verbose.
$Stanford::Remedy::LOGLEVEL = 1;

## Tag to include include in the common log file
$LOG_TAG = "ASSIGN_TKT";

## Where should we get local username/password information?
$CONFIG = "/etc/remedy/local.conf";

##############################################################################
### Declarations
##############################################################################

=head1 REQUIREMENTS

C<Stanford::Remedy>, C<ARS> (from B<http://www.arsperl.org/>), and the Remedy
API (installed in /opt/appadmin/remedy).

=cut

use ARS;
use Getopt::Long qw/GetOptions/;
use Pod::Usage;
use Text::Wrap;

use Stanford::Remedy::Unix;

use strict;
use vars qw/$LOGLEVEL $LOG_TAG $DEFAULT_TYPE $AR @STATUS $REMEDY_LOG
             %AR_SCHEMA $FORMAT_TKT $FORMAT_WORKLOG %IMPACT %URGENT
             @PRIORITY %STATUS_REASON $FORMAT_DEBUG $CONFIG $REMEDY_USER 
             $REMEDY_PASS $REMEDY_SYSTEM $REMEDY_PORT %USERS %GROUPS/;
use warnings;

##############################################################################
### main ()
##############################################################################

shift @ARGV if $ENV{'REMOTE_USER'};    # support for remctl use
$|++;       # Flush output

my ($user, $group) = (undef, undef);
my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
        'h|help'     => \&_usage,
        'v|version'  => \&_version,
        'u|user=s'   => \$user,
        'g|group=s'  => \$group,
                                ) || exit 1;

do $CONFIG or die "Couldn't load configuration '$CONFIG': $!\n";

_loglevel (5, "Remedy system is '$REMEDY_SYSTEM'");

my ($incnum, @rest) = &_parse_params (@ARGV);
$AR = Stanford::Remedy::remedy_connect ($REMEDY_USER, $REMEDY_PASS,
                                        $REMEDY_SYSTEM, $REMEDY_PORT) ||
    _log_and_die ("Connection Error occurred:\n\t$ars_errstr");
_loglevel (8, "Session is $AR");

my $return = 1;
unless (defined $user or defined $group) {
    print "Must set a user (may be blank), a group, or both\n";
} else { 
    $return = Stanford::Remedy::tkt_assign ($AR, $incnum, 
                                    'person' => $user, 'group' => $group);
    if ($return) { print "$return\n" } 
}

# actually print real information
my $tkthash = Stanford::Remedy::tkt ($AR, $incnum)
        or _log_and_die ("Couldn't get ticket '$incnum': $ars_errstr");
print scalar Stanford::Remedy::text_tkt_assignee ($AR, $tkthash);

Stanford::Remedy::remedy_logoff ($AR);
exit $return ? 1 : 0;

##############################################################################
### Internal Subroutines #####################################################
##############################################################################

### _log_and_die (TEXT)
# Logs TEXT with mainlib.pl's log () function, and dies with the text.

sub _log_and_die {
    my (@args) = @_;
    my $text = join ("\n", @args, '');
    Stanford::Remedy::remedy_log ($LOG_TAG, $text);
    Stanford::Remedy::remedy_logoff ($AR) if $AR;
    die $text;
}

### _loglevel (LEVEL, TEXT)
# Logs TEXT with mainlib.pl's log () function if the level passed is
# less-or-equal to the current $LOGLEVEL.

sub _loglevel {
    my ($level, @args) = @_;
    Stanford::Remedy::remedy_log_iflevel ($level, $LOG_TAG, @args);
}

sub _parse_params {
    my ($incnum, @text) = @_;
    pod2usage (-verbose => 1) unless ($incnum);

    # Standardize the ticket name
    unless (($incnum =~ /^INC/) && (length ($incnum) == 15)) {
        if ($incnum =~ /^HD\d+/) {
            $incnum =~ s/^HD0//;
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        } elsif ($incnum =~ /^INC\d+/) {
            $incnum =~ s/^INC//;
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        } elsif ($incnum =~ /^\d+$/) {
            $incnum = 'INC' . ('0' x (12 - length ($incnum))) . $incnum;
        }
    }

    _loglevel (5, "req set to $incnum");
    pod2usage (-verbose => 1) unless $incnum =~ /^INC\d+$/;

    ($incnum, join (" ", @text));
}


### _usage ()
# Prints out short status information and exits.

sub _usage { pod2usage (-verbose => 2) }

##############################################################################
### Final Documentation
##############################################################################

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

For Stanford internal use only.

=cut
